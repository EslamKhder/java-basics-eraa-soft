codes will needed to apply 
---------------------------------
List<Integer> numbers = Arrays.asList(10, 5, 3, 7, 2, 10, 5, 8, 9, 0, -3, 4);
---------------------------------
List<String> names = Arrays.asList("Ali", "Mona", "Ahmed", "Sara", "Amr", "Laila", "Kareem", "Nada", "Nour", "Samy", "", null);
-----------------------------------
class Student {
    String name;
    String department;
    double grade;

    // Constructor + Getters
    Student(String name, String department, double grade) {
        this.name = name;
        this.department = department;
        this.grade = grade;
    }

    public String getName() { return name; }
    public String getDepartment() { return department; }
    public double getGrade() { return grade; }
}

List<Student> students = Arrays.asList(
    new Student("Ali", "IT", 85),
    new Student("Mona", "CS", 92),
    new Student("Ahmed", "IT", 60),
    new Student("Sara", "CS", 70),
    new Student("Omar", "IS", 45),
    new Student("Laila", "IS", 78)
);
---------------------------------------
class Employee {
    String name;
    int age;
    String department;
    double salary;

    // Constructor + Getters
    Employee(String name, int age, String department, double salary) {
        this.name = name;
        this.age = age;
        this.department = department;
        this.salary = salary;
    }

    public String getName() { return name; }
    public int getAge() { return age; }
    public String getDepartment() { return department; }
    public double getSalary() { return salary; }
}

List<Employee> employees = Arrays.asList(
    new Employee("Ali", 30, "HR", 5000),
    new Employee("Mona", 25, "IT", 7000),
    new Employee("Ahmed", 30, "HR", 5500),
    new Employee("Sara", 27, "IT", 7200),
    new Employee("Omar", 40, "Finance", 8000),
    new Employee("Laila", 35, "Finance", 8200)
);
-----------------------------------------------------
List<List<String>> nestedWords = Arrays.asList(
    Arrays.asList("Java", "Stream"),
    Arrays.asList("API", "Lambda"),
    Arrays.asList("FlatMap", "Map")
);
-----------------------------------------------------
pls apply next 
🔹 Basic Stream Operations
Filter even numbers from a list of integers.

Find names starting with a specific letter from a list of strings.

Convert all strings to uppercase using stream.

Sort a list of integers in descending order using streams.

Remove duplicate elements from a list using distinct().

🔹 Intermediate Stream Tasks
Count the number of strings longer than 5 characters.

Find the first element in a stream that matches a given condition.

Check if any number is divisible by 5 in a list.

Collect elements into a Set instead of a List.

Skip the first 3 elements and return the rest.

🔹 Numeric Streams & Reductions
Calculate the sum of a list of integers using reduce.

Find the maximum and minimum value in a list.

Calculate the average of a list of doubles.

Multiply all integers in a list together using reduce.

Count how many numbers are positive in a list.

🔹 Collectors & Grouping
Group a list of students by their department.

Partition a list of numbers into even and odd using partitioningBy.

Create a comma-separated string from a list of strings.

Group employees by age and count how many per age.

Find the average salary per department in a list of employees.

🔹 Optional, Map, FlatMap
Flatten a list of lists into a single list.

Extract all unique characters from a list of words.

Filter a list of Optionals and collect non-empty values.

Map a list of strings to their lengths.

Return a list of uppercased words that start with “A”.

🔹 Advanced Operations
Sort a list of employees by salary then by name.

Find the second highest number in a list.

Find duplicate elements in a list of integers.

Remove null or empty strings from a list using stream.

Partition students into pass/fail groups based on grade.

